/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with user-specific data isolation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user themselves can read/write their profile.
 * - /tasks/{taskId}: Stores tasks. Anyone can read tasks but only the creator can edit and delete.
 * - /announcements/{announcementId}: Stores company announcements. Anyone can read announcements but only the author can edit and delete.
 * - /reports/{reportId}: Stores user reports. Only the associated user themselves can read/write reports.
 *
 * Key Security Decisions:
 * - User listing is not allowed to protect user privacy.
 * - The default security posture is deny-all unless explicitly allowed.
 * - Flexible Data Shapes: This ruleset does not enforce strict schema validation, focusing instead on authorization.
 *
 * Denormalization for Authorization:
 * - Tasks and Announcements: Include the author's user ID (authorId) directly on the document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (get, update, delete) Signed-in user can only access their own profile.
     * @deny (list) Prevents listing all users.
     * @deny (create) Non-signed-in user cannot create a profile.
     * @deny (update, delete) Signed-in user cannot update another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to tasks.
     * @path /tasks/{taskId}
     * @allow (get, list) Anyone can read tasks.
     * @allow (create) Signed-in user can create tasks. The 'assignedBy' field must match their user ID.
     * @allow (update, delete) Only the assignedBy user can update or delete the task.
     * @deny (update, delete) A non-signed-in user or someone other than the assignedBy user cannot modify the task.
     * @principle Enforces owner-only writes with public reads.
     */
    match /tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.assignedBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.assignedBy);
      allow delete: if isExistingOwner(resource.data.assignedBy);
    }

    /**
     * @description Secure access to announcements.
     * @path /announcements/{announcementId}
     * @allow (get, list) Anyone can read announcements.
     * @allow (create) Signed-in user can create announcements. The 'authorId' field must match their user ID.
     * @allow (update, delete) Only the author can update or delete the announcement.
     * @deny (update, delete) A non-signed-in user or someone other than the author cannot modify the announcement.
     * @principle Enforces owner-only writes with public reads.
     */
    match /announcements/{announcementId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Secure access to reports.
     * @path /reports/{reportId}
     * @allow (get) Signed-in user can get their own report.
     * @allow (create) Signed-in user can create their own report.
     * @allow (update, delete) Signed-in user can only access their own report.
     * @deny (list) Prevents listing all reports.
     * @deny (create) Non-signed-in user cannot create a report.
     * @deny (update, delete) Signed-in user cannot update another user's report.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && resource.data.userId == request.auth.uid;
      allow delete: if isExistingOwner(resource.data.userId) && resource.data.userId == request.auth.uid;
    }
  }
}