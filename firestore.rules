/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and reports.
 * Announcements are publicly readable, but only authorized users can create, update, or delete them.
 * Tasks are publicly readable and writable for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.  Access is restricted to the owner.
 * - /tasks/{taskId}: Stores tasks. No ownership is enforced to facilitate rapid prototyping.
 * - /announcements/{announcementId}: Stores global announcements. Publicly readable, write access controlled by authorId.
 * - /reports/{reportId}: Stores user-specific reports. Access is restricted to the owner.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is granted to announcements to allow for wide distribution.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * - Announcements include an `authorId` field to simplify ownership checks for write operations.
 *
 * Structural Segregation:
 * - No structural segregation is used in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces strict user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - User 'user_abc' can create their own profile if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) - User 'user_abc' can get, update, or delete their own profile.
     * @deny (create) - User 'user_xyz' cannot create a profile for user 'user_abc'.
     * @deny (get, update, delete) - User 'user_xyz' cannot get, update, or delete the profile of user 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read and write access to tasks for rapid prototyping.
     * @path /tasks/{taskId}
     * @allow (get, list, create, update, delete) - Any user can perform any operation on any task.
     * @principle Open access is enabled for prototyping purposes only. This should be restricted in a production environment.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows public read access to announcements but restricts write access to the author.
     * @path /announcements/{announcementId}
     * @allow (get, list) - Any user can read any announcement.
     * @allow (create) - User 'user_abc' can create an announcement if request.resource.data.authorId == 'user_abc'.
     * @allow (update, delete) - User 'user_abc' can update or delete an announcement if they are the author.
     * @deny (create) - User 'user_xyz' cannot create an announcement with authorId 'user_abc'.
     * @deny (update, delete) - User 'user_xyz' cannot update or delete an announcement authored by 'user_abc'.
     * @principle Allows public readability but enforces ownership for write operations.
     */
    match /announcements/{announcementId} {
      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    /**
     * @description Enforces strict user-ownership for reports.
     * @path /reports/{reportId}
     * @allow (create) - User 'user_abc' can create a report for themselves if request.auth.uid matches the userId.
     * @allow (get, update, delete) - User 'user_abc' can get, update, or delete their own report.
     * @deny (create) - User 'user_xyz' cannot create a report for user 'user_abc'.
     * @deny (get, update, delete) - User 'user_xyz' cannot get, update, or delete the report of user 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /reports/{reportId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
  }
}