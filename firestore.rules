/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and tasks,
 *              while allowing public read access to announcements with owner-only write access.
 *              User reports are secured with owner-only access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user themselves can read or write their profile.
 * - /tasks/{taskId}: Stores tasks. Anyone can create, read or list tasks, but only the assigning user or assigned user can update or delete them.
 * - /announcements/{announcementId}: Stores company announcements. Publicly readable, but only the author can modify or delete.
 * - /reports/{reportId}: Stores daily reports. Only the user themselves can read or write their reports.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Announcements are publicly readable but only the author can modify them.
 * - Reports are only accessible to the user who created them.
 *
 * Denormalization for Authorization:
 * - Announcements require an `authorId` field to enforce write permissions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with matching ID can create their profile.
     * @allow (get, list) - User can read their own profile.
     * @allow (update, delete) - User can update/delete their own profile.
     * @deny (create) - User cannot create a profile with an ID that doesn't match their own.
     * @deny (get, list) - User cannot read other user's profiles.
     * @deny (update, delete) - User cannot modify or delete other user's profiles.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tasks.
     * @path /tasks/{taskId}
     * @allow (create) - Any authenticated user can create a task.
     * @allow (get, list) - Any user can read or list tasks.
     * @allow (update, delete) - Only the assignedTo or assignedBy user can update or delete the task.
     * @deny (update, delete) - Other users cannot modify or delete tasks.
     * @principle Allows public read access but restricts writes to owners.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if (isSignedIn() && (resource.data.assignedTo == request.auth.uid || resource.data.assignedBy == request.auth.uid)) && resource != null;
      allow delete: if (isSignedIn() && (resource.data.assignedTo == request.auth.uid || resource.data.assignedBy == request.auth.uid)) && resource != null;
    }

    /**
     * @description Controls access to announcements.
     * @path /announcements/{announcementId}
     * @allow (get, list) - Any user can read announcements.
     * @allow (create) - Any authenticated user can create an announcement.
     * @allow (update, delete) - Only the announcement author can update or delete it.
     * @deny (update, delete) - Other users cannot modify or delete announcements.
     * @principle Allows public read access but restricts writes to owners.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.authorId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid && resource != null;
    }

    /**
     * @description Controls access to user reports.
     * @path /reports/{reportId}
     * @allow (create) - User with matching ID can create their report.
     * @allow (get, list) - User can read their own reports.
     * @allow (update, delete) - User can update/delete their own reports.
     * @deny (create) - User cannot create a report with an ID that doesn't match their own.
     * @deny (get, list) - User cannot read other user's reports.
     * @deny (update, delete) - User cannot modify or delete other user's reports.
     */
    match /reports/{reportId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }
  }
}