/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and reports.
 * Announcements are publicly readable but only created, updated, or deleted by an owner.
 * Tasks are open (any authenticated user can read or write tasks).
 * @data_structure
 * - /users/{userId}: Stores user profile information.
 * - /tasks/{taskId}: Stores tasks assigned to users.
 * - /announcements/{announcementId}: Stores company announcements.
 * - /reports/{reportId}: Stores daily user reports.
 * @key_security_decisions
 * - Listing of users is disallowed for security reasons.
 * - All write operations require user authentication.
 * - Owner-only access is enforced for user profiles and reports.
 * - Public read access for announcements, but owner-only writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, allowing only the owner to read, create, update, or delete.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with ID 'user123' can read/write their own profile.
     * @deny (get, create, update, delete) User with ID 'user456' cannot read/write profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Protects tasks data, allowing any signed-in user to read, create, update, or delete.
     * @path /tasks/{taskId}
     * @allow (get, create, update, delete) Any signed-in user can read/write tasks.
     * @deny None (all signed-in users are allowed).
     * @principle Any authenticated user can read and write tasks.
     */
    match /tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to announcements but restricts write access to the owner.
     * @path /announcements/{announcementId}
     * @allow (get, list) Any user can read announcements.
     * @allow (create, update, delete) Only the owner (authorId) can create, update, or delete.
     * @deny (create, update, delete) A non-owner cannot create, update, or delete an announcement.
     * @principle Public read, owner-only write.
     */
    match /announcements/{announcementId} {
      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.authorId);
      allow update: if isSignedIn() && isOwner(resource.data.authorId) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.authorId) && resource != null;
    }

    /**
     * @description Enforces owner-only access to reports.
     * @path /reports/{reportId}
     * @allow (get, create, update, delete) User with ID matching report's userId can read/write the report.
     * @deny (get, create, update, delete) User with ID not matching report's userId cannot read/write the report.
     * @principle Enforces document ownership for reports.
     */
    match /reports/{reportId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
    }
  }
}