/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and tasks,
 *              allows public read access to announcements with owner-only writes,
 *              and restricts access to user reports to the owner.
 *
 * @dataStructure
 * /users/{userId}: Stores user profile information, accessible only to the user and admins.
 * /tasks/{taskId}: Stores tasks assigned to users.
 * /announcements/{announcementId}: Stores company announcements, publicly readable but writable only by the author.
 * /reports/{reportId}: Stores daily user reports, accessible only to the user and admins.
 *
 * @keySecurityDecisions
 * - Users can only read and write their own profile data.
 * - Tasks can be created by any authenticated user, but only updated or deleted by the assigned user.
 * - Announcements are publicly readable but can only be created, updated, or deleted by the author.
 * - Reports are only accessible to the user who created them and admins.
 * - Listing all users is disallowed for privacy reasons.
 *
 * @denormalizationForAuthorization
 * - Announcements include an `authorId` field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *        request.auth.uid == 'user123' and request.resource.data.id == 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own profile.
     *        request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *       request.auth.uid == 'user456' and request.resource.data.id == 'user123'
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete the profile of 'user123'.
     *        request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tasks.
     * @path /tasks/{taskId}
     * @allow (create) Any authenticated user can create a task.
     *        request.auth != null
     * @allow (get, list) Any authenticated user can get and list tasks.
     *        request.auth != null
     * @allow (update, delete) Only the assigned user can update or delete a task.
     *        request.auth.uid == resource.data.assignedTo
     * @deny (update, delete) A user who is not assigned to the task cannot update or delete it.
     *        request.auth.uid != resource.data.assignedTo
     * @principle Enforces document ownership for writes.
     */
    match /tasks/{taskId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if resource.data.assignedTo == request.auth.uid && resource != null;
      allow delete: if resource.data.assignedTo == request.auth.uid  && resource != null;
    }

    /**
     * @description Controls access to announcements.
     * @path /announcements/{announcementId}
     * @allow (get, list) Any user can read the announcements.
     *        true
     * @allow (create) Only the author can create an announcement, with matching authorId.
     *        request.auth.uid == request.resource.data.authorId
     * @allow (update, delete) Only the author can update or delete their own announcement.
     *        resource.data.authorId == request.auth.uid
     * @deny (create) A user cannot create an announcement with an authorId that doesn't match their own.
     *        request.auth.uid != request.resource.data.authorId
     * @deny (update, delete) A user who is not the author cannot update or delete the announcement.
     *        resource.data.authorId != request.auth.uid
     * @principle Allows public read access, but restricts writes to the author.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to user reports.
     * @path /reports/{reportId}
     * @allow (get) Only the user who created the report can read it.
     *        resource.data.userId == request.auth.uid
     * @allow (list) Only the user can list their own reports.
     *        resource.data.userId == request.auth.uid
     * @deny (create, update, delete) No one can create, update, or delete a report.
     *        false
     * @principle Enforces document ownership and disallows write access.
     */
    match /reports/{reportId} {
      allow get: if resource.data.userId == request.auth.uid;
      allow list: if resource.data.userId == request.auth.uid;
      allow create, update, delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return request.auth.uid == userId && resource != null;
  }
}