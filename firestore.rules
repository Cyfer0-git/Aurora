/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and reports,
 * and a public-read with owner-write model for announcements. Tasks are open.
 * All write operations require authentication. Schema validation is relaxed
 * in this prototyping phase to enable rapid iteration.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, secured by ownership.
 * - /tasks/{taskId}: Stores tasks. Open access for prototyping.
 * - /announcements/{announcementId}: Stores company announcements, publicly readable but owner-writable.
 * - /reports/{reportId}: Stores user reports, secured by ownership.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Announcements are publicly readable to facilitate company-wide communication.
 * - Strict ownership is enforced for user profiles and reports.
 * - Tasks are open for prototyping.
 *
 * Denormalization for Authorization:
 * - The 'Announcement' entity includes both 'author' (display name) and 'authorId' to facilitate simpler security rules based on ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for user profile information.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @deny (create) - User with UID 'user123' cannot create a profile at /users/user456.
     * @allow (get) - User with UID 'user123' can read their profile at /users/user123.
     * @deny (get) - User with UID 'user123' cannot read the profile at /users/user456.
     * @allow (update) - User with UID 'user123' can update their profile at /users/user123.
     * @deny (update) - User with UID 'user123' cannot update the profile at /users/user456.
     * @allow (delete) - User with UID 'user123' can delete their profile at /users/user123.
     * @deny (delete) - User with UID 'user123' cannot delete the profile at /users/user456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Rule for tasks assigned to users. Open Access for prototyping
     * @path /tasks/{taskId}
     * @allow (get) - Any user can read a task.
     * @allow (list) - Any user can list tasks.
     * @allow (create) - Any user can create a task.
     * @allow (update) - Any user can update a task.
     * @allow (delete) - Any user can delete a task.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rule for company announcements.
     * @path /announcements/{announcementId}
     * @allow (get) - Any user can read any announcement.
     * @allow (list) - Any user can list announcements.
     * @allow (create) - User with UID 'user123' can create an announcement where request.resource.data.authorId == 'user123'.
     * @deny (create) - User with UID 'user123' cannot create an announcement where request.resource.data.authorId != 'user123'.
     * @allow (update) - User with UID 'user123' can update an announcement where resource.data.authorId == 'user123'.
     * @deny (update) - User with UID 'user123' cannot update an announcement where resource.data.authorId != 'user123'.
     * @allow (delete) - User with UID 'user123' can delete an announcement where resource.data.authorId == 'user123'.
     * @deny (delete) - User with UID 'user123' cannot delete an announcement where resource.data.authorId != 'user123'.
     * @principle Allows public reads but enforces document ownership for writes.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rule for daily user reports.
     * @path /reports/{reportId}
     * @allow (create) - User with UID 'user123' can create a report at /reports/{reportId} if request.resource.data.userId == 'user123'.
     * @deny (create) - User with UID 'user123' cannot create a report at /reports/{reportId} if request.resource.data.userId != 'user123'.
     * @allow (get) - User with UID 'user123' can read their report at /reports/{reportId} if resource.data.userId == 'user123'.
     * @deny (get) - User with UID 'user123' cannot read the report at /reports/{reportId} if resource.data.userId != 'user123'.
     * @allow (update) - User with UID 'user123' can update their report at /reports/{reportId} if resource.data.userId == 'user123'.
     * @deny (update) - User with UID 'user123' cannot update the report at /reports/{reportId} if resource.data.userId != 'user123'.
     * @allow (delete) - User with UID 'user123' can delete their report at /reports/{reportId} if resource.data.userId == 'user123'.
     * @deny (delete) - User with UID 'user123' cannot delete the report at /reports/{reportId} if resource.data.userId != 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /reports/{reportId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(request.resource.data.userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}