rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, ensuring each user can only access their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get) User with ID 'user123' can read their profile if authenticated as 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secures tasks.  Create, update, and delete are disallowed.  Read access is public.
     * @path /tasks/{taskId}
     * @allow (get) Any authenticated user can read any task.
     * @deny (create) No one can create tasks via client-side rules.
     * @principle Restricts task management; read access is public.
     */
    match /tasks/{taskId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures announcements, allowing public read access but restricting write access to the author.
     * @path /announcements/{announcementId}
     * @allow (get) Any user can read any announcement.
     * @allow (create) User 'author123' can create an announcement if authenticated as 'author123'.
     * @deny (update) User 'otherUser' cannot update an announcement authored by 'author123'.
     * @principle Enforces document ownership for writes while allowing public reads.
     */
    match /announcements/{announcementId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    /**
     * @description Secures user reports, ensuring each user can only access their own reports.
     * @path /reports/{reportId}
     * @allow (create) User with ID 'user123' can create a report if authenticated as 'user123'.
     * @allow (get) User with ID 'user123' can read their report if authenticated as 'user123'.
     * @deny (get) User with ID 'user456' cannot read the report of user 'user123'.
     * @principle Enforces user-ownership for report data.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
  }
}