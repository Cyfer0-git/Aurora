/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and tasks.
 * Announcements are publicly readable but only creatable/modifiable by the author, who's ID is stored in the document.
 * User reports are private and only accessible to the user.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information; only accessible by the user themselves.
 * - /tasks/{taskId}: Stores tasks; publicly readable, but only creatable, updatable, and deletable by the assigned user.
 * - /announcements/{announcementId}: Stores announcements; publicly readable, only creatable/modifiable by the author.
 * - /reports/{reportId}: Stores user reports, only accessible by the user who created them.
 *
 * Key Security Decisions:
 * - User listing is disabled.
 * - Tasks are readable by anyone, but only the assigned user can modify them.
 * - Announcements are readable by anyone, but only the author can modify them.
 * - The `isOwner()` helper function centralizes the user-ownership check.
 * - Data validation is minimal in this prototyping phase, focusing on authorization.
 * - For public read collections, the author ID is validated on `create` to prevent impersonation,
 *   and immutability of the author ID is enforced on `update`.
 *
 * Denormalization for Authorization:
 * - Announcements include an `authorId` field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     */
    match /users/{userId} {
      //Verifies user is signed in
      function isSignedIn() {
        return request.auth != null;
      }
      //Verifies user id
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read tasks, but only the assigned user can create, update, or delete them.
     * @path /tasks/{taskId}
     */
    match /tasks/{taskId} {

      function isAssignedTo(assignedTo) {
        return request.auth.uid == assignedTo;
      }
        function isExistingAssignedTo(assignedTo) {
            return isAssignedTo(assignedTo) && resource.data != null;
        }

      allow get, list: if true;

      allow create: if isSignedIn() && isAssignedTo(request.resource.data.assignedTo);
      allow update: if isSignedIn() && isAssignedTo(request.resource.data.assignedTo);
      allow delete: if isSignedIn() && isAssignedTo(resource.data.assignedTo);
    }

    /**
     * @description Allows anyone to read announcements, but only the author can create, update, or delete them.
     * @path /announcements/{announcementId}
     */
    match /announcements/{announcementId} {

      function isAuthor(authorId) {
        return request.auth.uid == authorId;
      }
        function isExistingAuthor(authorId) {
            return isAuthor(authorId) && resource.data != null;
        }

      allow get, list: if true;

      allow create: if isSignedIn() && isAuthor(request.resource.data.authorId);
      allow update: if isSignedIn() && isAuthor(resource.data.authorId);
      allow delete: if isSignedIn() && isAuthor(resource.data.authorId);
    }

      /**
       * @description Allows users to read and write their own reports.
       * @path /reports/{reportId}
       */
    match /reports/{reportId} {

      function isReportOwner(userId) {
        return request.auth.uid == userId;
      }
        function isExistingReportOwner(userId) {
            return isReportOwner(userId) && resource.data != null;
        }

      allow get: if isSignedIn() && isReportOwner(resource.data.userId);
      allow list: if false;

      allow create: if isSignedIn() && isReportOwner(request.resource.data.userId);
      allow update: if isSignedIn() && isReportOwner(resource.data.userId);
      allow delete: if isSignedIn() && isReportOwner(resource.data.userId);
    }
  }
}