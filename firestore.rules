/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * User data is private and only accessible to the owning user. Announcements are publicly readable but only modifiable by their author. Tasks can be created by admins and assigned to users and Reports can be written by each user.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /tasks/{taskId}: Stores tasks.
 * - /announcements/{announcementId}: Stores global announcements.
 * - /reports/{reportId}: Stores daily reports.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Public listing of users is disallowed.
 * - Announcements are publicly readable, but only the author can modify them.
 * - The rules do not enforce strict schema validation during this prototyping phase, focusing instead on authorization.
 *
 * Denormalization for Authorization:
 *  - Announcements: The `Announcement` documents must contain an `authorId` field that stores the user ID of the author. This allows the rules to quickly check if the current user is the author of the announcement.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can access their own profile.
     * @deny (create) - If the userId does not match the authenticated user's uid.
     * @deny (get, update, delete) - If any other user tries to access this profile.
     * @deny (list) - Prevents listing all users.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow get, update, delete: if isSignedIn() && isOwner(userId) && request.resource.data.id == resource.data.id;
      allow list: if false;
    }

    /**
     * @description Controls access to tasks.
     * @path /tasks/{taskId}
     * @allow (create) - Allow an admin or the user who is assigning the task to create a task.
     * @allow (get, list) - Allow anyone to read tasks.
     * @allow (update, delete) - Only allow an admin to update or delete a task.
     * @deny (create) - If non-admin users are trying to create a task
     * @principle Allows admins to create tasks, Anyone can read them, admins can update/delete.
     */
    match /tasks/{taskId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow create: if isSignedIn() && isAdmin();
      allow get, list: if true;
      allow update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to announcements.
     * @path /announcements/{announcementId}
     * @allow (create) - Anyone can create an announcement.
     * @allow (get, list) - Anyone can read announcements.
     * @allow (update, delete) - Only the author of the announcement can update or delete it.
     * @deny (update, delete) - If a non-author user is trying to modify the announcement.
     * @principle Allows public read access but restricts writes to the author.
     */
    match /announcements/{announcementId} {
      function isAuthor(authorId) {
        return request.auth.uid == authorId;
      }
       function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn();
      allow get, list: if true;
      allow update, delete: if isSignedIn() && isAuthor(resource.data.authorId) && resource != null;
    }

     /**
     * @description Controls access to reports.
     * @path /reports/{reportId}
     * @allow (create) - A user can create their own reports if the userId matches their auth.uid.
     * @allow (get, update, delete) - A user can access their own reports.
     * @deny (create) - If the userId does not match the authenticated user's uid.
     * @deny (get, update, delete) - If any other user tries to access this report.
     * @deny (list) - Prevents listing all reports.
     * @principle Enforces document ownership for reports.
     */
    match /reports/{reportId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get, update, delete: if isSignedIn() && isOwner(resource.data.userId) && resource.data.userId == resource.data.userId && resource != null;
      allow list: if false;
    }
  }
}