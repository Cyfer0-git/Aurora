/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and tasks.
 * Announcements are publicly readable but only authors can modify them.
 * User reports are restricted to owner-only access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /tasks/{taskId}: Stores tasks, accessible to anyone.
 * - /announcements/{announcementId}: Stores company announcements, publicly readable but only the author can modify them.
 * - /reports/{reportId}: Stores user reports, accessible only to the user themselves.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Tasks can be read by anyone, but only the assignedBy user can create/update/delete them.
 * - Announcements are publicly readable, but only the author can create, update, and delete them.
 * - User reports are restricted to owner-only access.
 *
 * Denormalization for Authorization:
 * - Announcements should contain an `authorId` field to enable author-based write permissions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with ID matching auth.uid can create their profile.
     * @allow (get) User with ID matching auth.uid can read their profile.
     * @allow (update) User with ID matching auth.uid can update their profile.
     * @allow (delete) User with ID matching auth.uid can delete their profile.
     * @deny (create) User with ID not matching auth.uid cannot create a profile.
     * @deny (get) User with ID not matching auth.uid cannot read another user's profile.
     * @deny (update) User with ID not matching auth.uid cannot update another user's profile.
     * @deny (delete) User with ID not matching auth.uid cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read tasks, but only the assignedBy user can create, update, and delete them.
     * @path /tasks/{taskId}
     * @allow (get) Any user can read any task.
     * @allow (list) Any user can list tasks.
     * @allow (create) User can create task if request.auth.uid matches assignedBy.
     * @allow (update) User can update task if request.auth.uid matches assignedBy.
     * @allow (delete) User can delete task if request.auth.uid matches assignedBy.
     * @deny (create) User cannot create task if request.auth.uid does not match assignedBy.
     * @deny (update) User cannot update task if request.auth.uid does not match assignedBy.
     * @deny (delete) User cannot delete task if request.auth.uid does not match assignedBy.
     * @principle Public read, owner-only writes, with ownership based on the assignedBy field.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.assignedBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.assignedBy == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.assignedBy == request.auth.uid && resource != null;
    }

    /**
     * @description Allows anyone to read announcements, but only the author can create, update, and delete them.
     * @path /announcements/{announcementId}
     * @allow (get) Any user can read any announcement.
     * @allow (list) Any user can list announcements.
     * @allow (create) User can create announcement if request.auth.uid matches authorId.
     * @allow (update) User can update announcement if request.auth.uid matches authorId.
     * @allow (delete) User can delete announcement if request.auth.uid matches authorId.
     * @deny (create) User cannot create announcement if request.auth.uid does not match authorId.
     * @deny (update) User cannot update announcement if request.auth.uid does not match authorId.
     * @deny (delete) User cannot delete announcement if request.auth.uid does not match authorId.
     * @principle Public read, owner-only writes, with ownership based on the authorId field.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.authorId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid && resource != null;
    }

    /**
     * @description Allows users to read and write their own reports.
     * @path /reports/{reportId}
     * @allow (create) User with ID matching auth.uid can create their report.
     * @allow (get) User with ID matching auth.uid can read their report.
     * @allow (update) User with ID matching auth.uid can update their report.
     * @allow (delete) User with ID matching auth.uid can delete their report.
     * @deny (create) User with ID not matching auth.uid cannot create a report.
     * @deny (get) User with ID not matching auth.uid cannot read another user's report.
     * @deny (update) User with ID not matching auth.uid cannot update another user's report.
     * @deny (delete) User with ID not matching auth.uid cannot delete another user's report.
     * @principle Enforces document ownership for all operations.
     */
    match /reports/{reportId} {
      allow get: if isOwnerReport(resource.data.userId);
      allow list: if false;
      allow create: if isOwnerReport(request.resource.data.userId);
      allow update: if isExistingOwnerReport(resource.data.userId);
      allow delete: if isExistingOwnerReport(resource.data.userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

        function isOwnerReport(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
            function isExistingOwnerReport(userId) {
      return isSignedIn() && isOwnerReport(userId) && resource != null;
    }
  }
}