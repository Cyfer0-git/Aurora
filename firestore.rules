/**
 * @file Firebase Security Rules for Firestore.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and reports,
 *                  allows public read access to announcements with owner-only writes,
 *                  and restricts task management to authorized users.
 *
 * @data_structure The Firestore database is structured as follows:
 *                  - /users/{userId}: Stores individual user profiles.
 *                  - /tasks/{taskId}: Stores task information.
 *                  - /announcements/{announcementId}: Stores company announcements.
 *                  - /reports/{reportId}: Stores daily user reports.
 *
 * @key_security_decisions
 *                  - Users can only read and write their own profile data.
 *                  - Announcements are publicly readable but only created, updated, and deleted by authorized users (the author).
 *                  - Reports are owned by users and can only be read and written by themselves.
 *                  - Listing of users is disallowed.
 *
 * @denormalization_for_authorization To simplify authorization, the 'Announcement' documents include both 'author' and 'authorId' fields,
 *                                     allowing rules to quickly check the author's ID without additional reads.
 *
 * @structural_segregation N/A - There is no segregation of private and public data within a single collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their own profile.
     * @allow (get, update, delete) User can only access their own profile.
     * @deny (create) User cannot create a profile with an ID that doesn't match their own.
     * @deny (list) Listing all users is not allowed.
     * @deny (update, delete) Other users cannot modify or delete this profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Only signed-in users can access their own data.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to tasks.
     * @path /tasks/{taskId}
     * @allow (get, list) Any signed-in user can read tasks.
     * @allow (create) Any signed-in user can create tasks.
     * @allow (update, delete) Only the user who is assigned to the task can update or delete it.
     * @deny (update, delete) Other users cannot modify or delete this task.
     * @principle Enforces document ownership for task writes.
     */
    match /tasks/{taskId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null && request.auth.uid == resource.data.assignedTo;
      allow delete: if isSignedIn() && resource != null && request.auth.uid == resource.data.assignedTo;
    }

    /**
     * @description Controls access to announcements.
     * @path /announcements/{announcementId}
     * @allow (get, list) All users can read announcements.
     * @allow (create) Only the author can create announcements and the authorId must match their uid.
     * @allow (update, delete) Only the original author can update or delete announcements.
     * @deny (create) Unauthorized users cannot create announcements.
     * @deny (update, delete) Other users cannot modify or delete announcements.
     * @principle Allows public read access with owner-only writes for announcements.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to user reports.
     * @path /reports/{reportId}
     * @allow (create) User with matching ID can create their own report.
     * @allow (get, update, delete) User can only access their own reports.
     * @deny (create) User cannot create a report with an ID that doesn't match their own.
     * @deny (list) Listing all reports is not allowed.
     * @deny (update, delete) Other users cannot modify or delete this report.
     * @principle Enforces document ownership for user reports.
     */
    match /reports/{reportId} {
      allow get: if isSignedIn() && isReportOwner(resource.data.userId);
      allow list: if false;
      allow create: if isSignedIn() && isReportOwner(request.resource.data.userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingReportOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingReportOwner(resource.data.userId);
    }

    // --- Helper functions ---

    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the user ID matches the authenticated user's ID.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Checks if the report is owned by the authenticated user.
    function isReportOwner(userId) {
      return request.auth.uid == userId;
    }

    // Checks if the user is the owner of the existing document
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    // Checks if the user is the owner of the existing report
    function isExistingReportOwner(userId) {
      return isSignedIn() && isReportOwner(userId) && resource != null;
    }
  }
}