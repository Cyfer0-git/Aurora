/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with user-specific data isolation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Only the user and admins can read/write.
 * - /tasks/{taskId}: Stores tasks, accessible to all for reads, but restricted to owners for writes.
 * - /announcements/{announcementId}: Stores company announcements, publicly readable, but only admins can create, update, or delete.
 * - /reports/{reportId}: Stores daily user reports. Accessible to admins and the user who created the report.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles.
 * - Tasks are readable by all users. Only assignedTo user can modify.
 * - Announcements are publicly readable, but only admins can manage them.
 * - Reports are readable by the user and admins.
 * - Deny all listing operations on `/users` collection to prevent data leakage.
 *
 * Denormalization for Authorization:
 * - The `tasks` collection relies on the `assignedTo` field to control user access to tasks.
 * - The `announcements` collection relies on the `authorId` field to control author access.
 * - The `reports` collection relies on the `userId` to control user access.
 *
 * Structural Segregation:
 * - No explicit private/public segregation is used.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     */
    function isAdmin() {
      return isSignedIn() && (request.auth.token.role == 'admin');
    }

    /**
     * @description Checks if the authenticated user's ID matches the resource's userId.
     */
    function isResourceOwner(resource) {
        return isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Checks if the document exists and the authenticated user is the owner.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the assignedTo.
     */
     function isAssignedTo(resource) {
      return isSignedIn() && resource.data.assignedTo == request.auth.uid;
    }


    /**
     * @description Security rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User 'test_user' with ID 'test_user' can create their profile.
     * @allow (get) User 'test_user' can read their profile. Admin can read any profile.
     * @allow (update) User 'test_user' can update their profile. Admin can update any profile.
     * @deny (create) User 'another_user' cannot create a profile with ID 'test_user'.
     * @deny (list) Any user cannot list all users in the database.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for the /tasks/{taskId} collection.
     * @path /tasks/{taskId}
     * @allow (get) Any user can read a task.
     * @allow (list) Any user can list tasks.
     * @allow (create) Signed in user can create a new task.
     * @allow (update) Only the assigned user can update the task.
     * @deny (delete) Only the assigned user can delete the task.
     * @principle Tasks are readable by all, but only the assigned user can modify.
     */
    match /tasks/{taskId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isAssignedTo(resource);
      allow delete: if isAssignedTo(resource);
    }

    /**
     * @description Security rules for the /announcements/{announcementId} collection.
     * @path /announcements/{announcementId}
     * @allow (get) Any user can read an announcement.
     * @allow (list) Any user can list announcements.
     * @allow (create) Only admin can create an announcement. The authorId field must match the request.auth.uid.
     * @allow (update) Only admin can update an announcement.
     * @allow (delete) Only admin can delete an announcement.
     * @principle Announcements are publicly readable, but only admins can manage them.
     */
    match /announcements/{announcementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin() && request.resource.data.authorId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for the /reports/{reportId} collection.
     * @path /reports/{reportId}
     * @allow (get) Only the report's user and admins can read the report.
     * @allow (list) Only admins can list all reports.
     * @allow (create) Any signed-in user can create a report where request.resource.data.userId matches request.auth.uid.
     * @allow (update) Only the report's user and admins can update the report.
     * @allow (delete) Only admins can delete reports.
     * @principle Reports are readable and writable by the user who created them and admins.
     */
    match /reports/{reportId} {
      allow get: if isResourceOwner(resource) || isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isResourceOwner(resource) || isAdmin();
      allow delete: if isAdmin();
    }
  }
}