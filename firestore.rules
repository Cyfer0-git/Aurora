rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) request.auth.uid == "{userId}"
     * @allow (get, update, delete) request.auth.uid == "{userId}"
     * @deny (create) request.auth.uid != "{userId}"
     * @deny (get, update, delete) request.auth.uid != "{userId}"
     * @principle Enforces strict user ownership.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read announcements, but only the author can modify them.
     * @path /announcements/{announcementId}
     * @allow (get, list) true
     * @allow (create) request.resource.data.authorId == request.auth.uid
     * @allow (update, delete) resource.data.authorId == request.auth.uid
     * @deny (create) request.resource.data.authorId != request.auth.uid
     * @deny (update, delete) resource.data.authorId != request.auth.uid
     * @principle Allows public read access with owner-only writes based on authorId.
     */
    match /announcements/{announcementId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwnerByAuthorId(authorId) {
        return request.auth.uid == authorId;
      }
      function isExistingOwnerByAuthorId(authorId) {
          return isOwnerByAuthorId(authorId) && resource != null && resource.data.authorId == authorId;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwnerByAuthorId(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwnerByAuthorId(resource.data.authorId);
    }

    /**
     * @description Allows anyone to read tasks, but only the assigner can modify them.
     * @path /tasks/{taskId}
     * @allow (get, list) true
     * @allow (create) request.resource.data.assignedBy == request.auth.uid
     * @allow (update, delete) resource.data.assignedBy == request.auth.uid
     * @deny (create) request.resource.data.assignedBy != request.auth.uid
     * @deny (update, delete) request.resource.data.assignedBy != request.auth.uid
     * @principle Allows public read access with owner-only writes based on assignedBy.
     */
    match /tasks/{taskId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isOwnerByAssignedBy(assignedBy) {
            return request.auth.uid == assignedBy;
        }
        function isExistingOwnerByAssignedBy(assignedBy) {
            return isOwnerByAssignedBy(assignedBy) && resource != null && resource.data.assignedBy == assignedBy;
        }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.assignedBy == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwnerByAssignedBy(resource.data.assignedBy);
      allow delete: if isSignedIn() && isExistingOwnerByAssignedBy(resource.data.assignedBy);
    }

    /**
     * @description Allows anyone to read reports, but only the user who created the report can modify them.
     * @path /reports/{reportId}
     * @allow (get, list) true
     * @allow (create) request.resource.data.userId == request.auth.uid
     * @allow (update, delete) resource.data.userId == request.auth.uid
     * @deny (create) request.resource.data.userId != request.auth.uid
     * @deny (update, delete) request.resource.data.userId != request.auth.uid
     * @principle Allows public read access with owner-only writes based on userId.
     */
    match /reports/{reportId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isOwnerByUserId(userId) {
            return request.auth.uid == userId;
        }
        function isExistingOwnerByUserId(userId) {
            return isOwnerByUserId(userId) && resource != null && resource.data.userId == userId;
        }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwnerByUserId(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwnerByUserId(resource.data.userId);
    }
  }
}