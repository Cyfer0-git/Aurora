/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership checks for specific data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Accessible only by the user themselves.
 * - /tasks/{taskId}: Stores tasks. Anyone can read. Only the assigned user can edit or delete a task.
 * - /announcements/{announcementId}: Stores announcements. Publicly readable, but only the author can edit or delete.
 * - /reports/{reportId}: Stores user reports. Publicly readable, but only the user that created the report can edit or delete.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Tasks are publicly readable but writable only by assigned users.
 * - Announcements are publicly readable, but only the author can edit.
 * - Reports are publicly readable, but only the user can edit their own reports.
 * - Data shape is not strictly enforced to allow for rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (read, write): Authenticated user with matching userId can access their own profile.
     * @deny (read, write): Any user trying to access another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to task documents.
     * @path /tasks/{taskId}
     * @allow (get, list): All users can read tasks.
     * @allow (create): All authenticated users can create tasks. The creatorId must match their UID.
     * @allow (update, delete): Only the assigned user can update or delete tasks.
     * @deny (update, delete): Others cannot update or delete.
     * @principle Allows public read access but restricts writes to the assigned user.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isTaskAssignedToUser(resource.data.assignedTo);
      allow delete: if isSignedIn() && isTaskAssignedToUser(resource.data.assignedTo) && resource != null;
    }

    /**
     * @description Controls access to announcement documents.
     * @path /announcements/{announcementId}
     * @allow (get, list): All users can read announcements.
     * @allow (create): All authenticated users can create announcements. The authorId must match their UID.
     * @allow (update, delete): Only the author can update or delete their announcements.
     * @deny (update, delete): Others cannot update or delete.
     * @principle Allows public read access but restricts writes to the author.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to report documents.
     * @path /reports/{reportId}
     * @allow (get, list): All users can read reports.
     * @allow (create): All authenticated users can create reports. The userId must match their UID.
     * @allow (update, delete): Only the user can update or delete their own reports.
     * @deny (update, delete): Others cannot update or delete.
     * @principle Allows public read access but restricts writes to the report's user.
     */
    match /reports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isTaskAssignedToUser(assignedTo) {
    return request.auth.uid == assignedTo;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}