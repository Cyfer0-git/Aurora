/**
 * @file Firebase Security Rules
 * @description This ruleset enforces a role-based access control model with user-owned data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves (owner-only).
 * - /tasks/{taskId}: Tasks are publicly readable but only modifiable by admins.
 * - /announcements/{announcementId}: Announcements are publicly readable, and creatable, updatable, deletable only by the author (with matching authorId in document).
 * - /reports/{reportId}: Daily reports, readable and writable only by admins.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect user privacy.
 * - The 'reports' collection is only for admins.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document, and it exists.
     * @param {string} userId - The user ID to compare against the resource's UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @return {boolean} True if the user has the 'admin' role, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && (request.auth.token.role == 'admin');
    }


    /**
     * @description Defines security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - A user can only access or modify their own profile.
     * @deny (create) - A user cannot create a profile with a userId that doesn't match their auth.uid.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for tasks.
     * @path /tasks/{taskId}
     * @allow (get, list) - Anyone can read tasks.
     * @allow (create, update, delete) - Only admins can create, update, or delete tasks.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete tasks.
     * @principle Restricts task management to admins.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines security rules for announcements.
     * @path /announcements/{announcementId}
     * @allow (get, list) - Anyone can read announcements.
     * @allow (create) - Users can create announcements only if the authorId matches their auth.uid.
     * @allow (update, delete) - Only the author of the announcement can update or delete it.
     * @deny (create) - Users cannot create announcements with an authorId that doesn't match their auth.uid.
     * @principle Enforces ownership for announcement creation and modification.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Defines security rules for reports.
     * @path /reports/{reportId}
     * @allow (get, list, create, update, delete) - Only admins can access and modify reports.
     * @deny (get, list, create, update, delete) - Non-admins cannot access or modify reports.
     * @principle Restricts report management to admins.
     */
    match /reports/{reportId} {
      allow get, list, create, update, delete: if isAdmin();
    }
  }
}