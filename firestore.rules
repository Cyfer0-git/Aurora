rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the user is an existing owner of the resource (for update/delete).
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    match /users/{userId} {
      /**
       * @description Manages user profiles, allowing users to create their own profile and admins to manage all profiles.
       * @path /users/{userId}
       * @allow (create) - A user with UID 'user123' can create a profile at /users/user123.
       * @allow (update) - An admin can update any user profile.
       * @deny (create) - A user with UID 'user123' cannot create a profile at /users/user456.
       * @deny (update) - A non-admin user cannot update another user's profile.
       * @principle Enforces user ownership for profile creation and admin-only access for updates.
       */
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // User listing is disabled for privacy.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    match /tasks/{taskId} {
      /**
       * @description Manages tasks, allowing read access to all and write access to admins only.
       * @path /tasks/{taskId}
       * @allow (get) - Any user can read a task.
       * @allow (list) - Any user can list tasks.
       * @allow (create) - An admin can create a task.
       * @deny (create) - A non-admin user cannot create a task.
       * @principle Open read access with restricted write access based on admin role.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /announcements/{announcementId} {
      /**
       * @description Manages company announcements, allowing read access to all and write access to admins only.
       * @path /announcements/{announcementId}
       * @allow (get) - Any user can read an announcement.
       * @allow (list) - Any user can list announcements.
       * @allow (create) - An admin can create an announcement.
       * @deny (create) - A non-admin user cannot create an announcement.
       * @principle Open read access with restricted write access based on admin role.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /reports/{reportId} {
      /**
       * @description Manages user reports, allowing only the owner or an admin to read and write.
       * @path /reports/{reportId}
       * @allow (get) - The owner of the report (userId) can read the report.
       * @allow (create) - The owner of the report (userId) can create the report.
       * @deny (get) - A non-owner user cannot read another user's report.
       * @deny (create) - A user cannot create a report for another user.
       * @principle Enforces strict user ownership for report access.
       */
      allow get: if isSignedIn() && (get(/databases/$(database)/documents/reports/$(reportId)).data.userId == request.auth.uid || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && (get(/databases/$(database)/documents/reports/$(reportId)).data.userId == request.auth.uid || isAdmin());
      allow delete: if isSignedIn() && (get(/databases/$(database)/documents/reports/$(reportId)).data.userId == request.auth.uid || isAdmin());
    }
  }
}