rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get the role of a user from their user document.
    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read their own user document.
      // This is necessary for the getRole() function to work for the user making the request.
      allow get: if request.auth != null && request.auth.uid == userId;

      // Only admins can see the full list of users.
      allow list: if request.auth != null && getRole(request.auth.uid) == 'admin';
      
      // Only admins can create, update, or delete users.
      allow write: if request.auth != null && getRole(request.auth.uid) == 'admin';
    }

    // Rules for the 'tasks' collection
    match /tasks/{taskId} {
        // Any authenticated user can read a task if they are the one it's assigned to.
        allow get: if request.auth != null && resource.data.assignedTo == request.auth.uid;
        
        // Users can update the status of their own tasks.
        allow update: if request.auth != null && request.auth.uid == resource.data.assignedTo;

        // Admins have full read and write access to all tasks.
        allow read, write: if request.auth != null && getRole(request.auth.uid) == 'admin';
    }

    // Rules for the 'announcements' collection
    match /announcements/{announcementId} {
      // Any authenticated user can read announcements.
      allow get, list: if request.auth != null;

      // Only admins can create, update, or delete announcements.
      allow write: if request.auth != null && getRole(request.auth.uid) == 'admin';
    }

    // Rules for the 'reports' collection
    match /reports/{reportId} {
        // A user can create their own report.
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;

        // A user can read their own reports.
        allow get, list: if request.auth != null && request.auth.uid == resource.data.userId;
      
        // Admins can read all reports.
        allow get, list: if request.auth != null && getRole(request.auth.uid) == 'admin';

        // No one can update or delete reports through the client.
        allow update, delete: if false;
    }
  }
}