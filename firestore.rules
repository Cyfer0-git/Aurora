/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * Users can manage their own data, while administrators have broader privileges.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /tasks/{taskId}: Stores tasks assigned to users.
 * - /announcements/{announcementId}: Stores company announcements.
 * - /reports/{reportId}: Stores daily user reports.
 *
 * Key Security Decisions:
 * - Users can only read, update, and delete their own user document.
 * - Announcements are publicly readable but only manageable by admins.
 * - Tasks can be read and updated by assigned users and managed by admins.
 * - Reports can be created and read by the user who owns the report. Admins can read all reports.
 * - To simplify rules, the `role` is denormalized directly onto the `/users/{userId}` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching userId can create their own document.
     * @allow (read, update, delete) - Authenticated user with matching userId can read, update and delete their own document.
     * @deny (create) - Authenticated user attempts to create a document with a userId that doesn't match their own.
     * @deny (update, delete) - Authenticated user attempts to update or delete a document with a userId that doesn't match their own.
     * @principle Enforces document ownership and self-creation.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages company announcements.
     * @path /announcements/{announcementId}
     * @allow (read) - Any authenticated user can read announcements.
     * @allow (create, update, delete) - Only admins can create, update, and delete announcements.
     * @deny (create, update, delete) - Non-admin users attempt to create, update, or delete announcements.
     * @principle Public read with role-based write access.
     */
    match /announcements/{announcementId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isAdmin() {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages tasks assigned to users.
     * @path /tasks/{taskId}
     * @allow (read, update) - Authenticated users can read and update tasks assigned to them.
     * @allow (create, delete) - Admins can create and delete any task.
     * @deny (read, update) - Users attempt to read or update tasks not assigned to them.
     * @deny (create, delete) - Non-admin users attempt to create or delete tasks.
     * @principle Combines user-based and role-based access control.
     */
    match /tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAssignedToUser(userId) {
        return resource.data.assignedTo == userId;
      }

      function isAdmin() {
          return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get: if isSignedIn() && (isAssignedToUser(request.auth.uid) || isAdmin());
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && (isAssignedToUser(request.auth.uid) || isAdmin());
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages daily user reports.
     * @path /reports/{reportId}
     * @allow (create, read) - Authenticated users can create and read their own reports.
     * @allow (read) - Admins can read all reports.
     * @deny (create) - Users attempt to create reports for other users.
     * @principle Enforces document ownership for creation and combines it with role-based read access.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return resource.data.userId == userId;
      }
      function isAdmin() {
          return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get: if isSignedIn() && (isOwner(request.auth.uid) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}