/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with user-specific data isolation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user and admins can read/write.
 * - /tasks/{taskId}: Stores tasks. Anyone can read, but only assigned user can modify the task.
 * - /announcements/{announcementId}: Stores company announcements. Anyone can read, but only authors can modify the task.
 * - /reports/{reportId}: Stores daily user reports. Only the user and admins can read/write.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect user privacy.
 * - Data validation is relaxed for rapid prototyping but MUST be tightened in production.
 * - Role-based access control is implemented using the `role` field on the `/users/{userId}` document.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 * - Tasks and Announcements store the user ID of the assignee/author directly in the document to avoid needing a `get()` call to the `/users/{userId}` document for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles based on role and ownership.
     * @path /users/{userId}
     * @allow (read, write) if the user is the owner of the profile or an admin.
     * @deny (read, write) if the user is not the owner and not an admin.
     * @principle Enforces document ownership for writes and role-based access.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants access to tasks.
     * @path /tasks/{taskId}
     * @allow (read) to everyone.
     * @allow (create) to signed in user
     * @allow (update, delete) to the user assigned to the task.
     * @deny (update, delete) to others.
     * @principle Enforces document ownership for writes.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isAssignedTo(resource.data.assignedTo);
      allow delete: if isSignedIn() && isAssignedTo(resource.data.assignedTo);
    }

    /**
     * @description Grants access to announcements.
     * @path /announcements/{announcementId}
     * @allow (read) to everyone.
     * @allow (create) to signed in user
     * @allow (update, delete) to the author of the announcement.
     * @deny (update, delete) to others.
     * @principle Enforces document ownership for writes.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isAuthor(resource.data.authorId);
      allow delete: if isSignedIn() && isAuthor(resource.data.authorId);
    }

    /**
     * @description Grants access to reports based on role and ownership.
     * @path /reports/{reportId}
     * @allow (read, write) if the user is the owner of the report or an admin.
     * @deny (read, write) if the user is not the owner and not an admin.
     * @principle Enforces document ownership for writes and role-based access.
     */
    match /reports/{reportId} {
      allow get: if isSignedIn() && (isOwnerReport(resource.data.userId) || isAdmin());
      allow list: if isSignedIn() && (isOwnerReport(resource.data.userId) || isAdmin());
      allow create: if isSignedIn() && isOwnerReport(request.resource.data.userId);
      allow update: if isSignedIn() && (isOwnerReport(resource.data.userId) || isAdmin());
      allow delete: if isSignedIn() && isAdmin();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isOwnerReport(userId) {
      return request.auth.uid == userId;
    }

    function isAssignedTo(userId) {
      return request.auth.uid == userId;
    }

    function isAuthor(authorId) {
      return request.auth.uid == authorId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}