/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and reports.
 *   Tasks and Announcements are publicly readable, but only owners/creators can modify them.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the user themselves.
 * - /tasks/{taskId}: Stores tasks. Publicly readable. Owner can modify.
 * - /announcements/{announcementId}: Stores company announcements. Publicly readable. Author can modify.
 * - /reports/{reportId}: Stores user-generated reports, accessible only to the user themselves.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Tasks and announcements are publicly readable to facilitate broad communication.
 * - Reports are private and accessible only to the user who created them.
 * - Data validation is relaxed in this prototyping phase to allow for rapid schema iteration.
 *
 * Denormalization for Authorization:
 * - Announcements include an `authorId` field to simplify ownership checks for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile information.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their profile.
     *   - request.auth.uid == 'user123' AND request.resource.data.id == 'user123'
     * @allow (get, update, delete) - User with ID 'user123' reads/updates/deletes their profile.
     *   - request.auth.uid == 'user123'
     * @deny (create) - User with ID 'user456' attempts to create a profile for 'user123'.
     *   - request.auth.uid == 'user456', resource.id == 'user123'
     * @deny (get, update, delete) - User with ID 'user456' attempts to read/update/delete the profile of 'user123'.
     *   - request.auth.uid == 'user456', resource.id == 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages tasks assigned to users.
     * @path /tasks/{taskId}
     * @allow (get, list) - Any user can read tasks.
     *   - true
     * @allow (create) - User with ID 'user123' creates a new task.
     *   - request.auth.uid != null
     * @allow (update, delete) - User with ID 'user123' updates/deletes a task they own.
     *   - isOwner(resource.data.assignedBy)
     * @deny (create) - Unauthenticated user attempts to create a task.
     *   - request.auth.uid == null
     * @deny (update, delete) - User with ID 'user456' attempts to update/delete a task owned by 'user123'.
     *   - request.auth.uid == 'user456', resource.data.assignedBy == 'user123'
     * @principle Allows public read access, restricts write access to the owner.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.assignedBy);
      allow delete: if isExistingOwner(resource.data.assignedBy);
    }

    /**
     * @description Manages company announcements.
     * @path /announcements/{announcementId}
     * @allow (get, list) - Any user can read announcements.
     *   - true
     * @allow (create) - User with ID 'author123' creates a new announcement.
     *   - request.auth.uid != null && request.resource.data.authorId == request.auth.uid
     * @allow (update, delete) - User with ID 'author123' updates/deletes an announcement they authored.
     *   - request.auth.uid == resource.data.authorId
     * @deny (create) - User with ID 'user456' attempts to create an announcement with authorId 'author123'.
     *   - request.auth.uid == 'user456', request.resource.data.authorId == 'author123'
     * @deny (update, delete) - User with ID 'user456' attempts to update/delete an announcement authored by 'author123'.
     *   - request.auth.uid == 'user456', resource.data.authorId == 'author123'
     * @principle Allows public read access, restricts write access to the announcement's author.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Manages daily user reports.
     * @path /reports/{reportId}
     * @allow (create) - User with ID 'user123' creates their daily report.
     *   - request.auth.uid == 'user123' && request.resource.data.userId == 'user123'
     * @allow (get, update, delete) - User with ID 'user123' reads/updates/deletes their own report.
     *   - request.auth.uid == 'user123'
     * @deny (create) - User with ID 'user456' attempts to create a report for 'user123'.
     *   - request.auth.uid == 'user456', request.resource.data.userId == 'user123'
     * @deny (get, update, delete) - User with ID 'user456' attempts to read/update/delete the report of 'user123'.
     *   - request.auth.uid == 'user456', resource.data.userId == 'user123'
     * @principle Enforces document ownership, restricting access to the user who created the report.
     */
    match /reports/{reportId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isOwner(resource.data.userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}