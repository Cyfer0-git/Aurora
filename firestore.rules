/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict user-ownership and
 * role-based access where appropriate. It allows for rapid prototyping by
 * skipping schema validation of request data, focusing instead on
 * authentication and authorization.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the user
 *   themselves.
 * - /tasks/{taskId}: Stores tasks. Anyone can read tasks, but only the user who creates them can modify it
 * - /announcements/{announcementId}: Stores company announcements. Anyone can read announcement but only who creates them can modify it.
 * - /reports/{reportId}: Stores user reports.  Anyone can read reports, but only the user who creates them can modify it.
 *
 * Key Security Decisions:
 * - Users can only access their own user document.
 * - Listing of users is disallowed.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 * - For `tasks`, `announcements`, and `reports`, read access is public but write access is restricted to the author.
 *
 * Denormalization for Authorization:
 * - To simplify rules and avoid costly `get()` calls, the rules assume that
 *   data required for authorization decisions (e.g., ownership) is denormalized
 *   directly onto the documents. For example, tasks should contain an
 *   `assignedBy` field indicating the user who created the task.
 *
 * Structural Segregation:
 * - The rules do not use boolean flags to differentiate between public and
 *   private data within the same collection. Instead, they assume that public
 *   and private data are stored in separate collections or subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing resource.
     */
    function isExistingOwner(ownerId) {
      return isSignedIn() && request.auth.uid == ownerId && resource != null;
    }

    /**
     * @description Enforces user-level access control for profile data.
     * @path /users/{userId}
     * @allow (create) User A can create their own profile with matching ID.
     * @allow (get) User A can read their own profile.
     * @allow (update) User A can update their own profile.
     * @allow (delete) User A can delete their own profile.
     * @deny (create) User A cannot create a profile for User B.
     * @deny (get) User A cannot read User B's profile.
     * @deny (update) User A cannot update User B's profile.
     * @deny (delete) User A cannot delete User B's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to tasks, but restricts modifications to the author.
     * @path /tasks/{taskId}
     * @allow (get) Anyone can read a task.
     * @allow (list) Anyone can list tasks.
     * @allow (create) User A can create a task with themselves as the author.
     * @allow (update) User A can update a task they authored.
     * @allow (delete) User A can delete a task they authored.
     * @deny (create) User A cannot create a task and assign User B as the author.
     * @deny (update) User A cannot update a task authored by User B.
     * @deny (delete) User A cannot delete a task authored by User B.
     * @principle Allows public read access with owner-only writes.
     */
    match /tasks/{taskId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.assignedBy);
      allow delete: if isExistingOwner(resource.data.assignedBy);
    }

    /**
     * @description Allows public read access to announcements, but restricts modifications to the author.
     * @path /announcements/{announcementId}
     * @allow (get) Anyone can read an announcement.
     * @allow (list) Anyone can list announcements.
     * @allow (create) User A can create an announcement with themselves as the author.
     * @allow (update) User A can update an announcement they authored.
     * @allow (delete) User A can delete an announcement they authored.
     * @deny (create) User A cannot create an announcement and assign User B as the author.
     * @deny (update) User A cannot update an announcement authored by User B.
     * @deny (delete) User A cannot delete an announcement authored by User B.
     * @principle Allows public read access with owner-only writes.
     */
    match /announcements/{announcementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows public read access to reports, but restricts modifications to the author.
     * @path /reports/{reportId}
     * @allow (get) Anyone can read a report.
     * @allow (list) Anyone can list reports.
     * @allow (create) User A can create a report with themselves as the author.
     * @allow (update) User A can update a report they authored.
     * @allow (delete) User A can delete a report they authored.
     * @deny (create) User A cannot create a report and assign User B as the author.
     * @deny (update) User A cannot update a report authored by User B.
     * @deny (delete) User A cannot delete a report authored by User B.
     * @principle Allows public read access with owner-only writes.
     */
    match /reports/{reportId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}