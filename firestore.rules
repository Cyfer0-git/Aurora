/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with user-owned data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /tasks/{taskId}: Stores tasks.
 * - /announcements/{announcementId}: Stores announcements, publicly readable, but writeable only by admins.
 * - /reports/{reportId}: Stores user reports, accessible only to admins.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Announcements are publicly readable but creation/modification is restricted to admins.
 * - Reports are only accessible to admins.
 * - Data shape validation is relaxed for prototyping, focusing on authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile documents.
     * @path /users/{userId}
     * @allow (get, list, update, delete) User with ID 'user123' can access their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @deny (get, list, update, delete) User with ID 'user456' cannot access profile of user with ID 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && isExistingOwner(userId);
      allow delete: if isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Grants access to task documents.
     * @path /tasks/{taskId}
     * @allow (get, list) Any signed-in user can read tasks.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete tasks
     * @principle Requires authentication for all operations.
     */
    match /tasks/{taskId} {
        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to announcement documents.
     * @path /announcements/{announcementId}
     * @allow (get, list) Any user can read announcements.
     * @deny (create, update, delete) Only admins can create, update, or delete announcements.
     * @principle Allows public reads, restricts writes to admins.
     */
    match /announcements/{announcementId} {
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

      /**
       * @description Grants access to report documents.
       * @path /reports/{reportId}
       * @allow (get, list) Only admins can read or list reports.
       * @deny (create, update, delete) Only admins can create, update, or delete reports.
       * @principle Restricts all access to reports to admins.
       */
    match /reports/{reportId} {
        allow get, list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }


    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

        /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the admin role.
     * @return True if the user has the admin role, false otherwise.
     */
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }
  }
}