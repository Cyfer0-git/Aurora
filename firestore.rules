/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles and reports,
 *                  and allows public read access to announcements with owner-only writes.
 *                  Tasks are not secured beyond requiring authentication for write access.
 * @data_structure Data is organized into top-level collections: /users/{userId}, /tasks/{taskId},
 *                 /announcements/{announcementId}, and /reports/{reportId}.
 * @key_security_decisions - Listing users is disallowed.
 *                           - Announcements are publicly readable, but only the author can modify them.
 *                           - Tasks are writeable by any authenticated user, a decision made to unblock initial prototyping.
 *                           - Reports are strictly owned by the user, preventing cross-user data access.
 * @denormalization_for_authorization The 'Announcement' entity requires the `authorId` field to
 *                                      enable secure write rules based on the authenticated user's ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can only access their own profile data.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create) - Cannot create a user if the userId does not match the authenticated user's ID.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId && resource != null;
    }

    /**
     * @description Controls access to tasks.
     * @path /tasks/{taskId}
     * @allow (create, update, delete) - Any authenticated user can create, update, or delete tasks.
     * @allow (get, list) - Any user can read tasks.
     * @principle Allows any authenticated user to manage tasks.
     */
    match /tasks/{taskId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to company announcements.
     * @path /announcements/{announcementId}
     * @allow (get, list) - Allows public read access to all announcements.
     * @allow (create) - Only authenticated users can create announcements, and `authorId` must match their UID.
     * @allow (update, delete) - Only the author of the announcement can update or delete it.
     * @deny (create) - Cannot create an announcement with an `authorId` that doesn't match the authenticated user.
     * @principle Allows public read access with owner-only writes.
     */
    match /announcements/{announcementId} {
      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }
      function isSignedIn() {
          return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.authorId) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.authorId) && resource != null;
    }

    /**
     * @description Controls access to user reports.
     * @path /reports/{reportId}
     * @allow (create) - An authenticated user can create a report if the userId matches their auth.uid.
     * @allow (get, update, delete) - An authenticated user can only access their own reports.
     * @deny (list) - Listing all reports is not allowed.
     * @deny (create) - Cannot create a report if the userId does not match the authenticated user's ID.
     * @principle Enforces strict user-ownership for reports.
     */
    match /reports/{reportId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
    }
  }
}